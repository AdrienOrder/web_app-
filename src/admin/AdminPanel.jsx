// –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö—É–∫–æ–≤ React
import React, { 
    useEffect,    // –•—É–∫ –¥–ª—è side-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞)
    useState,     // –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useMemo,      // –•—É–∫ –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    useCallback   // –•—É–∫ –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
  } from 'react';
  
  // –ò–º–ø–æ—Ä—Ç —Ö—É–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  import { useAuth } from '../auto/AuthContext';
  
  // –ò–º–ø–æ—Ä—Ç —Ö—É–∫–æ–≤ react-table –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
  import { 
    useTable,    // –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    useSortBy    // –ü–ª–∞–≥–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  } from 'react-table';
  
  // –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ DnD (Drag and Drop) –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ dnd-kit
  import { 
    DndContext,        // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    useSensor,         // –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–∞
    useSensors,        // –•—É–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤
    PointerSensor,     // –°–µ–Ω—Å–æ—Ä –¥–ª—è –º—ã—à–∏/—Ç–∞—á–∞
    closestCenter      // –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  } from '@dnd-kit/core';
  
  // –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ dnd-kit
  import { 
    SortableContext,               // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    useSortable,                   // –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    horizontalListSortingStrategy  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  } from '@dnd-kit/sortable';
  
  // –ò–º–ø–æ—Ä—Ç CSS-—É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
  import { CSS } from '@dnd-kit/utilities';
  
  // –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π Bootstrap
  import 'bootstrap/dist/css/bootstrap.min.css';
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
  const SortableHeader = ({ column }) => {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–∞ useSortable –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const {
      attributes,   // HTML-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è draggable —ç–ª–µ–º–µ–Ω—Ç–∞
      listeners,    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
      setNodeRef,   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ref –Ω–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç
      transform,    // –û–±—ä–µ–∫—Ç —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏ (x, y, scaleX, scaleY)
      transition,   // –°—Ç—Ä–æ–∫–∞ —Å CSS transition
      isDragging    // –§–ª–∞–≥: true, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è
    } = useSortable({ id: column.id });  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  
    // –°—Ç–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const style = {
      transform: CSS.Transform.toString(transform),  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ CSS —Å—Ç—Ä–æ–∫—É
      transition,                                   // CSS transition –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
      cursor: isDragging ? 'grabbing' : 'pointer',  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
      whiteSpace: 'nowrap'                          // –ó–∞–ø—Ä–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
    };
  
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
    const handleClick = (e) => {
      if (isDragging) {                   // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è
        e.stopPropagation();              // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
        return;                           // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
      }
      column.getSortByToggleProps().onClick(e);  // –í—ã–∑—ã–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å—Ç–æ–ª–±—Ü–∞
    };
  
    // –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    return (
      <th
        {...column.getHeaderProps(column.getSortByToggleProps())}  // –ü—Ä–æ–ø—Å—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        ref={setNodeRef}                  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ref –Ω–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç
        style={style}                     // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        {...attributes}                   // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º HTML-–∞—Ç—Ä–∏–±—É—Ç—ã
        {...listeners}                    // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        onClick={handleClick}             // –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      >
        {column.render('Header')}         {/* –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
        <span>
          {column.isSorted                /* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∫–æ–Ω–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */
            ? (column.isSortedDesc 
                ? ' üîΩ' 
                : ' üîº') 
            : ''}
        </span>
      </th>
    );
  };
  
  // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  const AdminPanel = () => {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { userRole } = useAuth();
  
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:
    const [users, setUsers] = useState([]);          // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [loading, setLoading] = useState(true);    // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    const [error, setError] = useState(null);        // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    const [rowOrder, setRowOrder] = useState([]);    // –ü–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫
    const [columnOrder, setColumnOrder] = useState([]);  // –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
    const [newUser, setNewUser] = useState({         // –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      email: '',
      password: '',
      role: 'user'
    });
  
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è DnD
    const sensors = useSensors(
      useSensor(PointerSensor, {  // –ò—Å–ø–æ–ª—å–∑—É–µ–º PointerSensor (–º—ã—à—å/—Ç–∞—á)
        activationConstraint: {    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
          distance: 10             // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
        }
      })
    );
  
    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
      fetchUsers();  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    }, []);          // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π = –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    const fetchUsers = async () => {
      try {
        const response = await fetch('http://localhost:5000/users');  // GET –∑–∞–ø—Ä–æ—Å
        if (!response.ok) {                     // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200-299
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }
        const data = await response.json();     // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        setUsers(data);                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ users
      } catch (err) {                          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        setError(err.message);                 // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      } finally {                              // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        setLoading(false);                     // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
      }
    };
  
    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å—Ç—Ä–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ users
    useEffect(() => {
      setRowOrder(users.map(user => user.id));  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }, [users]);                               // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç users
  
    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (useCallback –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏)
    const handleDelete = useCallback(async (userId) => {
      try {
        const response = await fetch(`http://localhost:5000/users/${userId}`, {
          method: 'DELETE'  // DELETE –∑–∞–ø—Ä–æ—Å
        });
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setUsers(prev => prev.filter(user => user.id !== userId));
      } catch (err) {
        alert(err.message);  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ alert
      }
    }, []);  // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è
  
    // –§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleBlock = useCallback(async (userId, isBlocked) => {
      try {
        const response = await fetch(`http://localhost:5000/users/${userId}`, {
          method: 'PATCH',  // PATCH –∑–∞–ø—Ä–æ—Å –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          headers: { 
            'Content-Type': 'application/json'  // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          },
          body: JSON.stringify({ 
            blocked: !isBlocked  // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
          })
        });
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ users
        setUsers(prev =>
          prev.map(user => 
            user.id === userId 
              ? { ...user, blocked: !isBlocked }  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              : user
          )
        );
      } catch (err) {
        alert(err.message);
      }
    }, []);
  
    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleAddUser = async (e) => {
      e.preventDefault();  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      
      // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è newUser
      const { email, password, role } = newUser;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
      if (!email || !password || !role) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;  // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      }
  
      try {
        const response = await fetch('http://localhost:5000/users', {
          method: 'POST',  // POST –∑–∞–ø—Ä–æ—Å
          headers: { 
            'Content-Type': 'application/json' 
          },
          body: JSON.stringify({  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ JSON
            email,
            password,
            role,
            blocked: false  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
          })
        });
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        const newUserData = await response.json();  // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setUsers(prev => [...prev, newUserData]);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        setNewUser({ email: '', password: '', role: 'user' });
      } catch (err) {
        alert(err.message);
      }
    };
  
    // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    const allColumns = useMemo(() => [
      { 
        Header: 'ID',     // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        accessor: 'id',   // –ö–ª—é—á –≤ –¥–∞–Ω–Ω—ã—Ö
        id: 'id'          // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
      },
      { 
        Header: 'Email', 
        accessor: 'email', 
        id: 'email' 
      },
      { 
        Header: '–†–æ–ª—å', 
        accessor: 'role', 
        id: 'role' 
      },
      {
        Header: '–î–µ–π—Å—Ç–≤–∏—è',
        accessor: 'actions',
        id: 'actions',
        // –ö–∞—Å—Ç–æ–º–Ω–∞—è —è—á–µ–π–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        Cell: ({ row }) => (
          <>
            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
            <button
              className="btn btn-danger btn-sm"  // –°—Ç–∏–ª–∏ Bootstrap
              onClick={() => handleDelete(row.original.id)}  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫
            >
              –£–¥–∞–ª–∏—Ç—å
            </button>
            
            {/* –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ */}
            <button
              className={`btn ${row.original.blocked ? 'btn-success' : 'btn-warning'} btn-sm ms-2`}
              onClick={() => handleBlock(row.original.id, row.original.blocked)}
            >
              {row.original.blocked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
          </>
        ),
      },
    ], [handleDelete, handleBlock]);  // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è useMemo
  
    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
    useEffect(() => {
      if (columnOrder.length === 0) {  // –ï—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        setColumnOrder(allColumns.map(col => col.id));  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
    }, [allColumns, columnOrder]);  // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  
    // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–æ–ª–æ–Ω–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const orderedColumns = useMemo(() => {
      return columnOrder
        .map(id => allColumns.find(col => col.id === id))  // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –ø–æ id
        .filter(Boolean);                                  // –£–¥–∞–ª—è–µ–º undefined (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫)
    }, [columnOrder, allColumns]);
  
    // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const data = useMemo(() =>
      rowOrder
        .map(id => users.find(user => user.id === id))  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
        .filter(Boolean),                               // –£–¥–∞–ª—è–µ–º undefined
      [users, rowOrder]                                // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    );
  
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é react-table
    const {
      getTableProps,       // –ü—Ä–æ–ø—Å—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ table
      getTableBodyProps,   // –ü—Ä–æ–ø—Å—ã –¥–ª—è tbody
      headerGroups,        // –ì—Ä—É–ø–ø—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      rows,                // –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      prepareRow           // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –∫ —Ä–µ–Ω–¥–µ—Ä—É
    } = useTable({ 
      columns: orderedColumns,  // –ö–æ–ª–æ–Ω–∫–∏
      data                     // –î–∞–Ω–Ω—ã–µ
    }, useSortBy);             // –ü–ª–∞–≥–∏–Ω –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const handleDragEnd = (event) => {
      const { active, over } = event;  // active - –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π, over - –Ω–∞–¥ —á–µ–º –æ—Ç–ø—É—Å—Ç–∏–ª–∏
      
      if (active?.id !== over?.id) {   // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        const oldIndex = columnOrder.indexOf(active.id);  // –°—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å
        const newIndex = columnOrder.indexOf(over.id);    // –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        const updated = [...columnOrder];                 // –ö–æ–ø–∏—è –º–∞—Å—Å–∏–≤–∞
        const [moved] = updated.splice(oldIndex, 1);     // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
        updated.splice(newIndex, 0, moved);              // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        setColumnOrder(updated);                         // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
    };
  
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    if (userRole === '') return <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...</p>;          // –†–æ–ª—å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    if (userRole !== 'admin') return <h2>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.</h2>;  // –ù–µ—Ç –ø—Ä–∞–≤
    if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>;            // –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
    if (error) return <p>–û—à–∏–±–∫–∞: {error}</p>;                        // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  
    // –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    return (
      <div className="container mt-4">  {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Bootstrap —Å –æ—Ç—Å—Ç—É–ø–æ–º —Å–≤–µ—Ä—Ö—É */}
        <h3>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>   {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
  
        {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è */}
        <DndContext 
          sensors={sensors}                      // –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ–Ω—Å–æ—Ä—ã
          collisionDetection={closestCenter}     // –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–∏
          onDragEnd={handleDragEnd}              // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        >
          {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
          <SortableContext 
            items={columnOrder}                  // –ú–∞—Å—Å–∏–≤ id —Å–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            strategy={horizontalListSortingStrategy}  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          >
            {/* –¢–∞–±–ª–∏—Ü–∞ */}
            <table className="table" {...getTableProps()}>
              <thead>
                {headerGroups.map(headerGroup => (  // –ú–∞–ø–ø–∏–Ω–≥ –≥—Ä—É–ø–ø –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                  <tr {...headerGroup.getHeaderGroupProps()}>  {/* –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */}
                    {headerGroup.headers.map(column => (  // –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                      <SortableHeader 
                        key={column.id} 
                        column={column}  // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–ª–æ–Ω–∫–∏
                      />
                    ))}
                  </tr>
                ))}
              </thead>
              <tbody {...getTableBodyProps()}>
                {rows.map(row => {  // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
                  prepareRow(row);  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏
                  return (
                    <tr {...row.getRowProps()}>  {/* –°—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã */}
                      {row.cells.map(cell => (  // –ú–∞–ø–ø–∏–Ω–≥ —è—á–µ–µ–∫
                        <td {...cell.getCellProps()}>
                          {cell.render('Cell')}  {/* –†–µ–Ω–¥–µ—Ä —è—á–µ–π–∫–∏ */}
                        </td>
                      ))}
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </SortableContext>
        </DndContext>
  
        <hr />  {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è */}
  
        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <h4>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h4>
        <form onSubmit={handleAddUser} className="row g-3">  {/* –§–æ—Ä–º–∞ —Å —Å–µ—Ç–∫–æ–π Bootstrap */}
          {/* –ü–æ–ª–µ email */}
          <div className="col-md-4">
            <input
              type="email"
              className="form-control"
              placeholder="Email"
              value={newUser.email}
              onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
            />
          </div>
          
          {/* –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è */}
          <div className="col-md-4">
            <input
              type="password"
              className="form-control"
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={newUser.password}
              onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
            />
          </div>
          
          {/* –í—ã–±–æ—Ä —Ä–æ–ª–∏ */}
          <div className="col-md-3">
            <select
              className="form-select"
              value={newUser.role}
              onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}
            >
              <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
              <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
            </select>
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          <div className="col-md-1">
            <button type="submit" className="btn btn-primary w-100">
              –î–æ–±–∞–≤–∏—Ç—å
            </button>
          </div>
        </form>
      </div>
    );
  };
  
  // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  export default AdminPanel;